// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TestData.cs" company="DTV-Online">
//   Copyright(c) 2018 Dr. Peter Trimmel. All rights reserved.
// </copyright>
// <license>
// Licensed under the MIT license. See the LICENSE file in the project root for more information.
// </license>
// --------------------------------------------------------------------------------------------------------------------
namespace HeliosTest
{
    #region Using Directives

    using System.Globalization;

    using Xunit;

    using UtilityLib;

    using HeliosLib;
    using HeliosLib.Models;

    #endregion

    /// <summary>
    /// XUnit testing class.
    /// </summary>
    [Collection("Helios Test Collection")]
    public class TestData : IClassFixture<GatewayFixture>
    {
        #region Private Data Members

        private readonly HeliosGateway _gateway;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="TestData"/> class.
        /// </summary>
        public TestData(GatewayFixture fixture)
        {
            // Set the default culture.
            CultureInfo.CurrentCulture = new CultureInfo("en-US");

            _gateway = fixture.Gateway;
        }

        #endregion

        #region Test Methods

        [Theory]
        [InlineData("Data")]
        [InlineData("BoosterData")]
        [InlineData("DeviceData")]
        [InlineData("DisplayData")]
        [InlineData("ErrorData")]
        [InlineData("FanData")]
        [InlineData("HeaterData")]
        [InlineData("InfoData")]
        [InlineData("NetworkData")]
        [InlineData("OperationData")]
        [InlineData("SensorData")]
        [InlineData("SystemData")]
        [InlineData("TechnicalData")]
        [InlineData("VacationData")]
        public void TestProperty(string property)
        {
            Assert.True(typeof(HeliosGateway).IsProperty(property));
            Assert.NotNull(_gateway.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ItemDescription")]
        [InlineData("OrderNumber")]
        [InlineData("MacAddress")]
        [InlineData("Language")]
        [InlineData("Date")]
        [InlineData("Time")]
        [InlineData("DayLightSaving")]
        [InlineData("AutoUpdateEnabled")]
        [InlineData("PortalAccessEnabled")]
        [InlineData("ExhaustVentilatorVoltageLevel1")]
        [InlineData("SupplyVentilatorVoltageLevel1")]
        [InlineData("ExhaustVentilatorVoltageLevel2")]
        [InlineData("SupplyVentilatorVoltageLevel2")]
        [InlineData("ExhaustVentilatorVoltageLevel3")]
        [InlineData("SupplyVentilatorVoltageLevel3")]
        [InlineData("ExhaustVentilatorVoltageLevel4")]
        [InlineData("SupplyVentilatorVoltageLevel4")]
        [InlineData("MinimumVentilationLevel")]
        [InlineData("KwlBeEnabled")]
        [InlineData("KwlBecEnabled")]
        [InlineData("DeviceConfiguration")]
        [InlineData("PreheaterStatus")]
        [InlineData("KwlFTFConfig0")]
        [InlineData("KwlFTFConfig1")]
        [InlineData("KwlFTFConfig2")]
        [InlineData("KwlFTFConfig3")]
        [InlineData("KwlFTFConfig4")]
        [InlineData("KwlFTFConfig5")]
        [InlineData("KwlFTFConfig6")]
        [InlineData("KwlFTFConfig7")]
        [InlineData("HumidityControlStatus")]
        [InlineData("HumidityControlTarget")]
        [InlineData("HumidityControlStep")]
        [InlineData("HumidityControlStop")]
        [InlineData("CO2ControlStatus")]
        [InlineData("CO2ControlTarget")]
        [InlineData("CO2ControlStep")]
        [InlineData("VOCControlStatus")]
        [InlineData("VOCControlTarget")]
        [InlineData("VOCControlStep")]
        [InlineData("ThermalComfortTemperature")]
        [InlineData("TimeZoneOffset")]
        [InlineData("DateFormat")]
        [InlineData("HeatExchangerType")]
        [InlineData("PartyOperationDuration")]
        [InlineData("PartyVentilationLevel")]
        [InlineData("PartyOperationRemaining")]
        [InlineData("PartyOperationActivate")]
        [InlineData("StandbyOperationDuration")]
        [InlineData("StandbyVentilationLevel")]
        [InlineData("StandbyOperationRemaining")]
        [InlineData("StandbyOperationActivate")]
        [InlineData("OperationMode")]
        [InlineData("VentilationLevel")]
        [InlineData("VentilationPercentage")]
        [InlineData("TemperatureOutdoor")]
        [InlineData("TemperatureSupply")]
        [InlineData("TemperatureExhaust")]
        [InlineData("TemperatureExtract")]
        [InlineData("TemperaturePreHeater")]
        [InlineData("V00109")]
        [InlineData("TemperaturePostHeater")]
        [InlineData("ExternalHumiditySensor1")]
        [InlineData("ExternalHumiditySensor2")]
        [InlineData("ExternalHumiditySensor3")]
        [InlineData("ExternalHumiditySensor4")]
        [InlineData("ExternalHumiditySensor5")]
        [InlineData("ExternalHumiditySensor6")]
        [InlineData("ExternalHumiditySensor7")]
        [InlineData("ExternalHumiditySensor8")]
        [InlineData("ExternalHumidityTemperature1")]
        [InlineData("ExternalHumidityTemperature2")]
        [InlineData("ExternalHumidityTemperature3")]
        [InlineData("ExternalHumidityTemperature4")]
        [InlineData("ExternalHumidityTemperature5")]
        [InlineData("ExternalHumidityTemperature6")]
        [InlineData("ExternalHumidityTemperature7")]
        [InlineData("ExternalHumidityTemperature8")]
        [InlineData("V00127")]
        [InlineData("ExternalCO2Sensor1")]
        [InlineData("ExternalCO2Sensor2")]
        [InlineData("ExternalCO2Sensor3")]
        [InlineData("ExternalCO2Sensor4")]
        [InlineData("ExternalCO2Sensor5")]
        [InlineData("ExternalCO2Sensor6")]
        [InlineData("ExternalCO2Sensor7")]
        [InlineData("ExternalCO2Sensor8")]
        [InlineData("ExternalVOCSensor1")]
        [InlineData("ExternalVOCSensor2")]
        [InlineData("ExternalVOCSensor3")]
        [InlineData("ExternalVOCSensor4")]
        [InlineData("ExternalVOCSensor5")]
        [InlineData("ExternalVOCSensor6")]
        [InlineData("ExternalVOCSensor7")]
        [InlineData("ExternalVOCSensor8")]
        [InlineData("V00144")]
        [InlineData("TemperatureChannel")]
        [InlineData("WeeklyProfile")]
        [InlineData("V00220")]
        [InlineData("V00221")]
        [InlineData("V00222")]
        [InlineData("V00223")]
        [InlineData("V00224")]
        [InlineData("V00225")]
        [InlineData("V00226")]
        [InlineData("V00227")]
        [InlineData("V00228")]
        [InlineData("V00229")]
        [InlineData("SerialNumber")]
        [InlineData("ProductionCode")]
        [InlineData("SecurityCode")]
        [InlineData("SupplyFanSpeed")]
        [InlineData("ExhaustFanSpeed")]
        [InlineData("Password")]
        [InlineData("Logout")]
        [InlineData("VacationOperation")]
        [InlineData("VacationVentilationLevel")]
        [InlineData("VacationStartDate")]
        [InlineData("VacationEndDate")]
        [InlineData("VacationInterval")]
        [InlineData("VacationDuration")]
        [InlineData("V00901")]
        [InlineData("V00920")]
        [InlineData("V00921")]
        [InlineData("V00922")]
        [InlineData("V00923")]
        [InlineData("V00924")]
        [InlineData("V00925")]
        [InlineData("V00926")]
        [InlineData("V00927")]
        [InlineData("V00928")]
        [InlineData("V00929")]
        [InlineData("UseDHCP")]
        [InlineData("IPAddress")]
        [InlineData("SubnetMask")]
        [InlineData("Gateway")]
        [InlineData("StandardDNS")]
        [InlineData("FallbackDNS")]
        [InlineData("HostName")]
        [InlineData("PreheaterType")]
        [InlineData("KwlFunctionType")]
        [InlineData("HeaterAfterRunTime")]
        [InlineData("ExternalContact")]
        [InlineData("FaultTypeOutput")]
        [InlineData("FilterChange")]
        [InlineData("FilterChangeInterval")]
        [InlineData("FilterChangeRemaining")]
        [InlineData("BypassRoomTemperature")]
        [InlineData("BypassOutdoorTemperature")]
        [InlineData("BypassOutdoorTemperature2")]
        [InlineData("RestartChangeInterval")]
        [InlineData("StartReset")]
        [InlineData("FactoryReset")]
        [InlineData("SupplyLevel")]
        [InlineData("ExhaustLevel")]
        [InlineData("FanLevelRegion02")]
        [InlineData("FanLevelRegion24")]
        [InlineData("FanLevelRegion46")]
        [InlineData("FanLevelRegion68")]
        [InlineData("FanLevelRegion80")]
        [InlineData("OffsetExhaust")]
        [InlineData("FanLevelConfiguration")]
        [InlineData("SensorName1")]
        [InlineData("SensorName2")]
        [InlineData("SensorName3")]
        [InlineData("SensorName4")]
        [InlineData("SensorName5")]
        [InlineData("SensorName6")]
        [InlineData("SensorName7")]
        [InlineData("SensorName8")]
        [InlineData("CO2SensorName1")]
        [InlineData("CO2SensorName2")]
        [InlineData("CO2SensorName3")]
        [InlineData("CO2SensorName4")]
        [InlineData("CO2SensorName5")]
        [InlineData("CO2SensorName6")]
        [InlineData("CO2SensorName7")]
        [InlineData("CO2SensorName8")]
        [InlineData("VOCSensorName1")]
        [InlineData("VOCSensorName2")]
        [InlineData("VOCSensorName3")]
        [InlineData("VOCSensorName4")]
        [InlineData("VOCSensorName5")]
        [InlineData("VOCSensorName6")]
        [InlineData("VOCSensorName7")]
        [InlineData("VOCSensorName8")]
        [InlineData("SoftwareVersion")]
        [InlineData("OperatingHours")]
        [InlineData("OperationMinutesSupply")]
        [InlineData("OperationMinutesExhaust")]
        [InlineData("OperationMinutesPreheater")]
        [InlineData("OperationMinutesAfterheater")]
        [InlineData("PowerPreheater")]
        [InlineData("PowerAfterheater")]
        [InlineData("ResetFlag")]
        [InlineData("ErrorCode")]
        [InlineData("WarningCode")]
        [InlineData("InfoCode")]
        [InlineData("ModbusActivated")]
        [InlineData("NumberOfErrors")]
        [InlineData("NumberOfWarnings")]
        [InlineData("NumberOfInfos")]
        [InlineData("Errors")]
        [InlineData("Warnings")]
        [InlineData("Infos")]
        [InlineData("StatusFlags")]
        [InlineData("GlobalUpdate")]
        [InlineData("LastError")]
        [InlineData("ClearError")]
        [InlineData("SensorConfig1")]
        [InlineData("SensorConfig2")]
        [InlineData("SensorConfig3")]
        [InlineData("SensorConfig4")]
        [InlineData("SensorConfig5")]
        [InlineData("SensorConfig6")]
        [InlineData("SensorConfig7")]
        [InlineData("SensorConfig8")]
        [InlineData("V02103")]
        [InlineData("DataExchange")]
        [InlineData("V02115")]
        [InlineData("ActivateAutoMode")]
        [InlineData("V02117")]
        [InlineData("V02118")]
        [InlineData("V02119")]
        [InlineData("V02120")]
        [InlineData("V02121")]
        [InlineData("V02122")]
        [InlineData("V02123")]
        [InlineData("V02128")]
        [InlineData("V02129")]
        [InlineData("V02130")]
        [InlineData("V02131")]
        [InlineData("CountryCode")]
        [InlineData("V02136")]
        [InlineData("V02137")]
        [InlineData("V02142")]
        [InlineData("V02143")]
        [InlineData("V02144")]
        [InlineData("V02145")]
        [InlineData("V02146")]
        [InlineData("V02147")]
        [InlineData("V02148")]
        [InlineData("V02149")]
        [InlineData("V02150")]
        [InlineData("V02151")]
        [InlineData("V02152")]
        public void TestDataProperty(string property)
        {
            Assert.True(typeof(HeliosData).IsProperty(property));
            Assert.NotNull(_gateway.Data.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("PartyOperationDuration")]
        [InlineData("PartyVentilationLevel")]
        [InlineData("PartyOperationRemaining")]
        [InlineData("PartyOperationActivate")]
        [InlineData("StandbyOperationDuration")]
        [InlineData("StandbyVentilationLevel")]
        [InlineData("StandbyOperationRemaining")]
        [InlineData("StandbyOperationActivate")]
        [InlineData("StatusFlags")]
        public void TestBoosterDataProperty(string property)
        {
            Assert.True(typeof(BoosterData).IsProperty(property));
            Assert.NotNull(_gateway.BoosterData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("KwlBeEnabled")]
        [InlineData("KwlBecEnabled")]
        [InlineData("DeviceConfiguration")]
        [InlineData("PreheaterStatus")]
        [InlineData("HeatExchangerType")]
        [InlineData("WeeklyProfile")]
        [InlineData("PreheaterType")]
        [InlineData("KwlFunctionType")]
        [InlineData("HeaterAfterRunTime")]
        [InlineData("ExternalContact")]
        [InlineData("FaultTypeOutput")]
        [InlineData("FilterChange")]
        [InlineData("FilterChangeInterval")]
        [InlineData("FilterChangeRemaining")]
        [InlineData("BypassRoomTemperature")]
        [InlineData("BypassOutdoorTemperature")]
        [InlineData("BypassOutdoorTemperature2")]
        [InlineData("StartReset")]
        [InlineData("FactoryReset")]
        [InlineData("ModbusActivated")]
        [InlineData("StatusFlags")]
        [InlineData("V02115")]
        [InlineData("V02120")]
        [InlineData("V02121")]
        [InlineData("V02128")]
        [InlineData("V02129")]
        public void TestDeviceDataProperty(string property)
        {
            Assert.True(typeof(DeviceData).IsProperty(property));
            Assert.NotNull(_gateway.DeviceData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("PreheaterStatus")]
        [InlineData("HumidityControlStatus")]
        [InlineData("CO2ControlStatus")]
        [InlineData("VOCControlStatus")]
        [InlineData("PartyVentilationLevel")]
        [InlineData("PartyOperationActivate")]
        [InlineData("StandbyVentilationLevel")]
        [InlineData("StandbyOperationActivate")]
        [InlineData("OperationMode")]
        [InlineData("VentilationLevel")]
        [InlineData("VentilationPercentage")]
        [InlineData("TemperatureOutdoor")]
        [InlineData("TemperatureSupply")]
        [InlineData("TemperatureExhaust")]
        [InlineData("TemperatureExtract")]
        [InlineData("TemperaturePreHeater")]
        [InlineData("TemperaturePostHeater")]
        [InlineData("ExternalHumiditySensor1")]
        [InlineData("ExternalHumiditySensor2")]
        [InlineData("ExternalHumiditySensor3")]
        [InlineData("ExternalHumiditySensor4")]
        [InlineData("ExternalHumiditySensor5")]
        [InlineData("ExternalHumiditySensor6")]
        [InlineData("ExternalHumiditySensor7")]
        [InlineData("ExternalHumiditySensor8")]
        [InlineData("ExternalHumidityTemperature1")]
        [InlineData("ExternalHumidityTemperature2")]
        [InlineData("ExternalHumidityTemperature3")]
        [InlineData("ExternalHumidityTemperature4")]
        [InlineData("ExternalHumidityTemperature5")]
        [InlineData("ExternalHumidityTemperature6")]
        [InlineData("ExternalHumidityTemperature7")]
        [InlineData("ExternalHumidityTemperature8")]
        [InlineData("ExternalCO2Sensor1")]
        [InlineData("ExternalCO2Sensor2")]
        [InlineData("ExternalCO2Sensor3")]
        [InlineData("ExternalCO2Sensor4")]
        [InlineData("ExternalCO2Sensor5")]
        [InlineData("ExternalCO2Sensor6")]
        [InlineData("ExternalCO2Sensor7")]
        [InlineData("ExternalCO2Sensor8")]
        [InlineData("ExternalVOCSensor1")]
        [InlineData("ExternalVOCSensor2")]
        [InlineData("ExternalVOCSensor3")]
        [InlineData("ExternalVOCSensor4")]
        [InlineData("ExternalVOCSensor5")]
        [InlineData("ExternalVOCSensor6")]
        [InlineData("ExternalVOCSensor7")]
        [InlineData("ExternalVOCSensor8")]
        [InlineData("TemperatureChannel")]
        [InlineData("WeeklyProfile")]
        [InlineData("SupplyFanSpeed")]
        [InlineData("ExhaustFanSpeed")]
        [InlineData("VacationOperation")]
        [InlineData("VacationVentilationLevel")]
        [InlineData("ExternalContact")]
        [InlineData("SupplyLevel")]
        [InlineData("ExhaustLevel")]
        [InlineData("SensorName1")]
        [InlineData("SensorName2")]
        [InlineData("SensorName3")]
        [InlineData("SensorName4")]
        [InlineData("SensorName5")]
        [InlineData("SensorName6")]
        [InlineData("SensorName7")]
        [InlineData("SensorName8")]
        [InlineData("CO2SensorName1")]
        [InlineData("CO2SensorName2")]
        [InlineData("CO2SensorName3")]
        [InlineData("CO2SensorName4")]
        [InlineData("CO2SensorName5")]
        [InlineData("CO2SensorName6")]
        [InlineData("CO2SensorName7")]
        [InlineData("CO2SensorName8")]
        [InlineData("VOCSensorName1")]
        [InlineData("VOCSensorName2")]
        [InlineData("VOCSensorName3")]
        [InlineData("VOCSensorName4")]
        [InlineData("VOCSensorName5")]
        [InlineData("VOCSensorName6")]
        [InlineData("VOCSensorName7")]
        [InlineData("VOCSensorName8")]
        [InlineData("NumberOfErrors")]
        [InlineData("NumberOfWarnings")]
        [InlineData("NumberOfInfos")]
        [InlineData("StatusFlags")]
        [InlineData("SensorConfig1")]
        [InlineData("SensorConfig2")]
        [InlineData("SensorConfig3")]
        [InlineData("SensorConfig4")]
        [InlineData("SensorConfig5")]
        [InlineData("SensorConfig6")]
        [InlineData("SensorConfig7")]
        [InlineData("SensorConfig8")]
        public void TestDisplayDataProperty(string property)
        {
            Assert.True(typeof(DisplayData).IsProperty(property));
            Assert.NotNull(_gateway.DisplayData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("NumberOfErrors")]
        [InlineData("NumberOfWarnings")]
        [InlineData("NumberOfInfos")]
        [InlineData("Errors")]
        [InlineData("Warnings")]
        [InlineData("Infos")]
        [InlineData("StatusFlags")]
        [InlineData("DataExchange")]
        public void TestErrorDataProperty(string property)
        {
            Assert.True(typeof(ErrorData).IsProperty(property));
            Assert.NotNull(_gateway.ErrorData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ExhaustVentilatorVoltageLevel1")]
        [InlineData("SupplyVentilatorVoltageLevel1")]
        [InlineData("ExhaustVentilatorVoltageLevel2")]
        [InlineData("SupplyVentilatorVoltageLevel2")]
        [InlineData("ExhaustVentilatorVoltageLevel3")]
        [InlineData("SupplyVentilatorVoltageLevel3")]
        [InlineData("ExhaustVentilatorVoltageLevel4")]
        [InlineData("SupplyVentilatorVoltageLevel4")]
        [InlineData("MinimumVentilationLevel")]
        [InlineData("SupplyLevel")]
        [InlineData("ExhaustLevel")]
        [InlineData("FanLevelRegion02")]
        [InlineData("FanLevelRegion24")]
        [InlineData("FanLevelRegion46")]
        [InlineData("FanLevelRegion68")]
        [InlineData("FanLevelRegion80")]
        [InlineData("OffsetExhaust")]
        [InlineData("FanLevelConfiguration")]
        [InlineData("StatusFlags")]
        public void TestFanDataProperty(string property)
        {
            Assert.True(typeof(FanData).IsProperty(property));
            Assert.NotNull(_gateway.FanData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ItemDescription")]
        [InlineData("OrderNumber")]
        [InlineData("MacAddress")]
        [InlineData("WeeklyProfile")]
        [InlineData("StatusFlags")]
        public void TestHeaterDataProperty(string property)
        {
            Assert.True(typeof(HeaterData).IsProperty(property));
            Assert.NotNull(_gateway.HeaterData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ItemDescription")]
        [InlineData("OrderNumber")]
        [InlineData("MacAddress")]
        [InlineData("PartyOperationRemaining")]
        [InlineData("PartyOperationActivate")]
        [InlineData("StandbyOperationRemaining")]
        [InlineData("StandbyOperationActivate")]
        [InlineData("OperationMode")]
        [InlineData("VentilationLevel")]
        [InlineData("VentilationPercentage")]
        [InlineData("VacationOperation")]
        [InlineData("VacationEndDate")]
        [InlineData("ExternalContact")]
        [InlineData("StatusFlags")]
        public void TestInfoDataProperty(string property)
        {
            Assert.True(typeof(InfoData).IsProperty(property));
            Assert.NotNull(_gateway.InfoData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("UseDHCP")]
        [InlineData("IPAddress")]
        [InlineData("SubnetMask")]
        [InlineData("Gateway")]
        [InlineData("StandardDNS")]
        [InlineData("FallbackDNS")]
        [InlineData("HostName")]
        [InlineData("StatusFlags")]
        public void TestNetworkDataProperty(string property)
        {
            Assert.True(typeof(NetworkData).IsProperty(property));
            Assert.NotNull(_gateway.NetworkData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ItemDescription")]
        [InlineData("OrderNumber")]
        [InlineData("MacAddress")]
        [InlineData("Language")]
        [InlineData("Date")]
        [InlineData("Time")]
        [InlineData("DayLightSaving")]
        [InlineData("AutoUpdateEnabled")]
        [InlineData("PortalAccessEnabled")]
        [InlineData("ExhaustVentilatorVoltageLevel1")]
        [InlineData("SupplyVentilatorVoltageLevel1")]
        [InlineData("ExhaustVentilatorVoltageLevel2")]
        [InlineData("SupplyVentilatorVoltageLevel2")]
        [InlineData("ExhaustVentilatorVoltageLevel3")]
        [InlineData("SupplyVentilatorVoltageLevel3")]
        [InlineData("ExhaustVentilatorVoltageLevel4")]
        [InlineData("SupplyVentilatorVoltageLevel4")]
        [InlineData("MinimumVentilationLevel")]
        [InlineData("KwlBeEnabled")]
        [InlineData("KwlBecEnabled")]
        [InlineData("DeviceConfiguration")]
        [InlineData("PreheaterStatus")]
        [InlineData("KwlFTFConfig0")]
        [InlineData("KwlFTFConfig1")]
        [InlineData("KwlFTFConfig2")]
        [InlineData("KwlFTFConfig3")]
        [InlineData("KwlFTFConfig4")]
        [InlineData("KwlFTFConfig5")]
        [InlineData("KwlFTFConfig6")]
        [InlineData("KwlFTFConfig7")]
        [InlineData("HumidityControlStatus")]
        [InlineData("HumidityControlTarget")]
        [InlineData("HumidityControlStep")]
        [InlineData("HumidityControlStop")]
        [InlineData("CO2ControlStatus")]
        [InlineData("CO2ControlTarget")]
        [InlineData("CO2ControlStep")]
        [InlineData("VOCControlStatus")]
        [InlineData("VOCControlTarget")]
        [InlineData("VOCControlStep")]
        [InlineData("ThermalComfortTemperature")]
        [InlineData("TimeZoneOffset")]
        [InlineData("DateFormat")]
        [InlineData("HeatExchangerType")]
        [InlineData("KwlFunctionType")]
        [InlineData("SensorName1")]
        [InlineData("SensorName2")]
        [InlineData("SensorName3")]
        [InlineData("SensorName4")]
        [InlineData("SensorName5")]
        [InlineData("SensorName6")]
        [InlineData("SensorName7")]
        [InlineData("SensorName8")]
        [InlineData("StatusFlags")]
        [InlineData("SensorConfig1")]
        [InlineData("SensorConfig2")]
        [InlineData("SensorConfig3")]
        [InlineData("SensorConfig4")]
        [InlineData("SensorConfig5")]
        [InlineData("SensorConfig6")]
        [InlineData("SensorConfig7")]
        [InlineData("SensorConfig8")]
        public void TestOperationDataProperty(string property)
        {
            Assert.True(typeof(OperationData).IsProperty(property));
            Assert.NotNull(_gateway.OperationData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("KwlFTFConfig0")]
        [InlineData("KwlFTFConfig1")]
        [InlineData("KwlFTFConfig2")]
        [InlineData("KwlFTFConfig3")]
        [InlineData("KwlFTFConfig4")]
        [InlineData("KwlFTFConfig5")]
        [InlineData("KwlFTFConfig6")]
        [InlineData("KwlFTFConfig7")]
        [InlineData("HumidityControlStatus")]
        [InlineData("HumidityControlTarget")]
        [InlineData("HumidityControlStep")]
        [InlineData("HumidityControlStop")]
        [InlineData("CO2ControlStatus")]
        [InlineData("CO2ControlTarget")]
        [InlineData("CO2ControlStep")]
        [InlineData("VOCControlStatus")]
        [InlineData("VOCControlTarget")]
        [InlineData("VOCControlStep")]
        [InlineData("SensorName1")]
        [InlineData("SensorName2")]
        [InlineData("SensorName3")]
        [InlineData("SensorName4")]
        [InlineData("SensorName5")]
        [InlineData("SensorName6")]
        [InlineData("SensorName7")]
        [InlineData("SensorName8")]
        [InlineData("CO2SensorName1")]
        [InlineData("CO2SensorName2")]
        [InlineData("CO2SensorName3")]
        [InlineData("CO2SensorName4")]
        [InlineData("CO2SensorName5")]
        [InlineData("CO2SensorName6")]
        [InlineData("CO2SensorName7")]
        [InlineData("CO2SensorName8")]
        [InlineData("VOCSensorName1")]
        [InlineData("VOCSensorName2")]
        [InlineData("VOCSensorName3")]
        [InlineData("VOCSensorName4")]
        [InlineData("VOCSensorName5")]
        [InlineData("VOCSensorName6")]
        [InlineData("VOCSensorName7")]
        [InlineData("VOCSensorName8")]
        [InlineData("StatusFlags")]
        [InlineData("V02137")]
        [InlineData("V02142")]
        [InlineData("V02143")]
        [InlineData("V02144")]
        [InlineData("V02145")]
        [InlineData("V02146")]
        [InlineData("V02147")]
        [InlineData("V02148")]
        [InlineData("V02149")]
        [InlineData("V02150")]
        [InlineData("V02151")]
        [InlineData("V02152")]
        public void TestSensorDataProperty(string property)
        {
            Assert.True(typeof(SensorData).IsProperty(property));
            Assert.NotNull(_gateway.SensorData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("Language")]
        [InlineData("Date")]
        [InlineData("Time")]
        [InlineData("DayLightSaving")]
        [InlineData("AutoUpdateEnabled")]
        [InlineData("PortalAccessEnabled")]
        [InlineData("TimeZoneOffset")]
        [InlineData("DateFormat")]
        [InlineData("SupplyFanSpeed")]
        [InlineData("ExhaustFanSpeed")]
        [InlineData("SoftwareVersion")]
        [InlineData("OperationMinutesSupply")]
        [InlineData("OperationMinutesExhaust")]
        [InlineData("OperationMinutesPreheater")]
        [InlineData("OperationMinutesAfterheater")]
        [InlineData("PowerPreheater")]
        [InlineData("PowerAfterheater")]
        [InlineData("StatusFlags")]
        [InlineData("ActivateAutoMode")]
        [InlineData("CountryCode")]
        [InlineData("V02103")]
        public void TestSystemDataProperty(string property)
        {
            Assert.True(typeof(SystemData).IsProperty(property));
            Assert.NotNull(_gateway.SystemData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("ItemDescription")]
        [InlineData("OrderNumber")]
        [InlineData("MacAddress")]
        [InlineData("SerialNumber")]
        [InlineData("ProductionCode")]
        [InlineData("SecurityCode")]
        [InlineData("StatusFlags")]
        public void TestTechnicalDataProperty(string property)
        {
            Assert.True(typeof(TechnicalData).IsProperty(property));
            Assert.NotNull(_gateway.TechnicalData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("VacationOperation")]
        [InlineData("VacationVentilationLevel")]
        [InlineData("VacationStartDate")]
        [InlineData("VacationEndDate")]
        [InlineData("VacationInterval")]
        [InlineData("VacationDuration")]
        [InlineData("SupplyLevel")]
        [InlineData("ExhaustLevel")]
        [InlineData("StatusFlags")]
        public void TestVacationDataProperty(string property)
        {
            Assert.True(typeof(VacationData).IsProperty(property));
            Assert.NotNull(_gateway.VacationData.GetPropertyValue(property));
        }

        [Theory]
        [InlineData("v00000")]
        [InlineData("v00001")]
        [InlineData("v00002")]
        [InlineData("v00003")]
        [InlineData("v00004")]
        [InlineData("v00005")]
        [InlineData("v00006")]
        [InlineData("v00007")]
        [InlineData("v00008")]
        [InlineData("v00012")]
        [InlineData("v00013")]
        [InlineData("v00014")]
        [InlineData("v00015")]
        [InlineData("v00016")]
        [InlineData("v00017")]
        [InlineData("v00018")]
        [InlineData("v00019")]
        [InlineData("v00020")]
        [InlineData("v00021")]
        [InlineData("v00022")]
        [InlineData("v00023")]
        [InlineData("v00024")]
        [InlineData("v00025")]
        [InlineData("v00026")]
        [InlineData("v00027")]
        [InlineData("v00028")]
        [InlineData("v00029")]
        [InlineData("v00030")]
        [InlineData("v00031")]
        [InlineData("v00032")]
        [InlineData("v00033")]
        [InlineData("v00034")]
        [InlineData("v00035")]
        [InlineData("v00036")]
        [InlineData("v00037")]
        [InlineData("v00038")]
        [InlineData("v00039")]
        [InlineData("v00040")]
        [InlineData("v00041")]
        [InlineData("v00042")]
        [InlineData("v00043")]
        [InlineData("v00051")]
        [InlineData("v00052")]
        [InlineData("v00053")]
        [InlineData("v00091")]
        [InlineData("v00092")]
        [InlineData("v00093")]
        [InlineData("v00094")]
        [InlineData("v00096")]
        [InlineData("v00097")]
        [InlineData("v00098")]
        [InlineData("v00099")]
        [InlineData("v00101")]
        [InlineData("v00102")]
        [InlineData("v00103")]
        [InlineData("v00104")]
        [InlineData("v00105")]
        [InlineData("v00106")]
        [InlineData("v00107")]
        [InlineData("v00108")]
        [InlineData("v00109")]
        [InlineData("v00110")]
        [InlineData("v00111")]
        [InlineData("v00112")]
        [InlineData("v00113")]
        [InlineData("v00114")]
        [InlineData("v00115")]
        [InlineData("v00116")]
        [InlineData("v00117")]
        [InlineData("v00118")]
        [InlineData("v00119")]
        [InlineData("v00120")]
        [InlineData("v00121")]
        [InlineData("v00122")]
        [InlineData("v00123")]
        [InlineData("v00124")]
        [InlineData("v00125")]
        [InlineData("v00126")]
        [InlineData("v00127")]
        [InlineData("v00128")]
        [InlineData("v00129")]
        [InlineData("v00130")]
        [InlineData("v00131")]
        [InlineData("v00132")]
        [InlineData("v00133")]
        [InlineData("v00134")]
        [InlineData("v00135")]
        [InlineData("v00136")]
        [InlineData("v00137")]
        [InlineData("v00138")]
        [InlineData("v00139")]
        [InlineData("v00140")]
        [InlineData("v00141")]
        [InlineData("v00142")]
        [InlineData("v00143")]
        [InlineData("v00144")]
        [InlineData("v00146")]
        [InlineData("v00201")]
        [InlineData("v00220")]
        [InlineData("v00221")]
        [InlineData("v00222")]
        [InlineData("v00223")]
        [InlineData("v00224")]
        [InlineData("v00225")]
        [InlineData("v00226")]
        [InlineData("v00227")]
        [InlineData("v00228")]
        [InlineData("v00229")]
        [InlineData("v00303")]
        [InlineData("v00304")]
        [InlineData("v00343")]
        [InlineData("v00348")]
        [InlineData("v00349")]
        [InlineData("v00402")]
        [InlineData("v00403")]
        [InlineData("v00601")]
        [InlineData("v00602")]
        [InlineData("v00603")]
        [InlineData("v00604")]
        [InlineData("v00605")]
        [InlineData("v00606")]
        [InlineData("v00901")]
        [InlineData("v00920")]
        [InlineData("v00921")]
        [InlineData("v00922")]
        [InlineData("v00923")]
        [InlineData("v00924")]
        [InlineData("v00925")]
        [InlineData("v00926")]
        [InlineData("v00927")]
        [InlineData("v00928")]
        [InlineData("v00929")]
        [InlineData("v01001")]
        [InlineData("v01002")]
        [InlineData("v01003")]
        [InlineData("v01004")]
        [InlineData("v01005")]
        [InlineData("v01006")]
        [InlineData("v01007")]
        [InlineData("v01010")]
        [InlineData("v01017")]
        [InlineData("v01019")]
        [InlineData("v01020")]
        [InlineData("v01021")]
        [InlineData("v01031")]
        [InlineData("v01032")]
        [InlineData("v01033")]
        [InlineData("v01035")]
        [InlineData("v01036")]
        [InlineData("v01037")]
        [InlineData("v01038")]
        [InlineData("v01041")]
        [InlineData("v01042")]
        [InlineData("v01050")]
        [InlineData("v01051")]
        [InlineData("v01061")]
        [InlineData("v01062")]
        [InlineData("v01063")]
        [InlineData("v01064")]
        [InlineData("v01065")]
        [InlineData("v01066")]
        [InlineData("v01068")]
        [InlineData("v01071")]
        [InlineData("v01072")]
        [InlineData("v01073")]
        [InlineData("v01074")]
        [InlineData("v01075")]
        [InlineData("v01076")]
        [InlineData("v01077")]
        [InlineData("v01078")]
        [InlineData("v01081")]
        [InlineData("v01082")]
        [InlineData("v01083")]
        [InlineData("v01084")]
        [InlineData("v01085")]
        [InlineData("v01086")]
        [InlineData("v01087")]
        [InlineData("v01088")]
        [InlineData("v01091")]
        [InlineData("v01092")]
        [InlineData("v01093")]
        [InlineData("v01094")]
        [InlineData("v01095")]
        [InlineData("v01096")]
        [InlineData("v01097")]
        [InlineData("v01098")]
        [InlineData("v01101")]
        [InlineData("v01102")]
        [InlineData("v01103")]
        [InlineData("v01104")]
        [InlineData("v01105")]
        [InlineData("v01106")]
        [InlineData("v01108")]
        [InlineData("v01109")]
        [InlineData("v01120")]
        [InlineData("v01123")]
        [InlineData("v01124")]
        [InlineData("v01125")]
        [InlineData("v01200")]
        [InlineData("v01300")]
        [InlineData("v01301")]
        [InlineData("v01302")]
        [InlineData("v01303")]
        [InlineData("v01304")]
        [InlineData("v01305")]
        [InlineData("v01306")]
        [InlineData("v02013")]
        [InlineData("v02014")]
        [InlineData("v02015")]
        [InlineData("v02020")]
        [InlineData("v02021")]
        [InlineData("v02022")]
        [InlineData("v02023")]
        [InlineData("v02024")]
        [InlineData("v02025")]
        [InlineData("v02026")]
        [InlineData("v02027")]
        [InlineData("v02103")]
        [InlineData("v02104")]
        [InlineData("v02115")]
        [InlineData("v02116")]
        [InlineData("v02117")]
        [InlineData("v02118")]
        [InlineData("v02119")]
        [InlineData("v02120")]
        [InlineData("v02121")]
        [InlineData("v02122")]
        [InlineData("v02123")]
        [InlineData("v02128")]
        [InlineData("v02129")]
        [InlineData("v02130")]
        [InlineData("v02131")]
        [InlineData("v02134")]
        [InlineData("v02136")]
        [InlineData("v02137")]
        [InlineData("v02142")]
        [InlineData("v02143")]
        [InlineData("v02144")]
        [InlineData("v02145")]
        [InlineData("v02146")]
        [InlineData("v02147")]
        [InlineData("v02148")]
        [InlineData("v02149")]
        [InlineData("v02150")]
        [InlineData("v02151")]
        [InlineData("v02152")]
        public void TestHeliosLabelProperty(string label)
        {
            Assert.True(HeliosData.IsHelios(label));
            Assert.NotNull(_gateway.Data.GetHeliosValue(label));
        }

        #endregion
    }
}
